- name: Build a list of all the folders
  vmware.vmware_rest.vcenter_folder_info:
  register: all_folders

- name: Filter VM folders
  ansible.builtin.set_fact:
    vm_folders: "{{ all_folders.value | selectattr('type', 'equalto', 'VIRTUAL_MACHINE') | list }}"

- name: Check each VM folder for VMs
  vmware.vmware_rest.vcenter_vm_info:
    folders: "{{ item.folder }}"
  register: vm_folders_with_vms
  loop: "{{ vm_folders }}"
  when: vm_folders | length > 0

- name: Display VM names and IDs
  ansible.builtin.debug:
    msg: "VM Name: {{ item.name }}, VM ID: {{ item.vm }}"
  loop: "{{ vm_folders_with_vms.results | map(attribute='value') | flatten }}"
  when: item | length > 0
  loop_control:
    label: "{{ item.name }}"

- name: Collect VM names and IDs
  ansible.builtin.set_fact:
    vm_name_id_pairs: "{{ vm_name_id_pairs | default([]) + [{'name': item.name, 'vm': item.vm}] }}"
  loop: "{{ vm_folders_with_vms.results | map(attribute='value') | flatten }}"
  when: item | length > 0

- name: Initialize vms_for_plan_spec as empty list
  ansible.builtin.set_fact:
    vms_for_plan_spec: []

- name: Debug - Show user_selected_vm_names
  ansible.builtin.debug:
    msg: "User selected VM names: '{{ user_selected_vm_names }}' (split: {{ user_selected_vm_names.split('\n') }})"

- name: Debug - Show vm_name_id_pairs
  ansible.builtin.debug:
    msg: "VM name/ID pairs: {{ vm_name_id_pairs }}"

- name: Prepare VMs for Plan spec
  ansible.builtin.set_fact:
    vms_for_plan_spec: "{{ (vms_for_plan_spec or []) + [{'hooks': [], 'id': vm_id.vm}] }}"
  loop: "{{ vm_name_id_pairs }}"
  loop_control:
    loop_var: vm_id
  when: vm_id.name in user_selected_vm_names.split('\n')

- name: Debug - Show VMs for Plan spec
  ansible.builtin.debug:
    msg: "VMs for plan spec: {{ vms_for_plan_spec }}"

- name: Fail if no VMs were selected
  ansible.builtin.fail:
    msg: |
      No VMs were matched for the plan. 
      user_selected_vm_names: {{ user_selected_vm_names }}
      Available VMs: {{ vm_name_id_pairs | map(attribute='name') | list }}
      Please check that the VM name matches exactly (case-sensitive).
  when: (vms_for_plan_spec | default([]) | length) == 0

- name: Get information for the distributed port group 'segment-migrating-to-ocpvirt'
  vmware.vmware_rest.vcenter_network_info:
    filter_types: DISTRIBUTED_PORTGROUP
  register: my_portgroup

- name: Capture the distrivuted portgroup id to make network mappings
  ansible.builtin.set_fact: 
    portgroup_id: "{{ my_portgroup.value[0].network }}"

- name: Create or update a NetworkMap
  redhat.openshift.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: NetworkMap
      metadata:
        name: "{{ networkmap_name }}"
        namespace: openshift-mtv
      spec:
        map:
          - destination:
              type: pod
            source:
              id: "{{ portgroup_id }}"
        provider:
          destination:
            name: host
            namespace: openshift-mtv
          source:
            name: vmware
            namespace: openshift-mtv

- name: Build a list of all the datastores
  vmware.vmware_rest.vcenter_datastore_info:
  register: all_the_datastores

- name: Prepare datastore mappings for StorageMap
  ansible.builtin.set_fact:
    datastore_mappings: "{{ datastore_mappings | default([]) + [{'destination': {'storageClass': 'ocs-external-storagecluster-ceph-rbd'}, 'source': {'id': item.datastore}}] }}"
  loop: "{{ all_the_datastores.value }}"
  when: all_the_datastores.value | length > 0

- name: Create or update a StorageMap
  redhat.openshift.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: StorageMap
      metadata:
        name: "{{ storagemap_name }}"
        namespace: openshift-mtv
      spec:
        map: "{{ datastore_mappings }}"
        provider:
          destination:
            name: host
            namespace: openshift-mtv
          source:
            name: vmware
            namespace: openshift-mtv


- name: Deploy Virt Plan
  redhat.openshift.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: Plan
      metadata:
        name: "{{ plan_name }}"
        namespace: openshift-mtv
      spec:
        archived: false
        description: ''
        map:
          network:
            name: "{{ networkmap_name }}"
            namespace: openshift-mtv
          storage:
            name: "{{ storagemap_name }}"
            namespace: openshift-mtv
        provider:
          destination:
            name: host
            namespace: openshift-mtv
          source:
            name: vmware
            namespace: openshift-mtv
        targetNamespace: openshift-mtv
        vms: "{{ vms_for_plan_spec | default([]) }}"
        warm: false

- name: Create a Migration manifest to run the Plan CR
  redhat.openshift.k8s:
    api_version: forklift.konveyor.io/v1beta1
    kind: Migration
    namespace: openshift-mtv
    name: "{{ plan_name }}"
    definition:
      metadata:
        name: "{{ plan_name }}"
        namespace: openshift-mtv
      spec:
        plan:
          name: "{{ plan_name }}"
          namespace: openshift-mtv
